{"ast":null,"code":"var _jsxFileName = \"/Users/horodechna.julia/Documents/git/react/social/my-app/src/components/Users/UsersContainer.jsx\";\nimport { connect } from 'react-redux';\nimport { follow, setUsers, unFollow, setCurrentPage, setTotalUsersCount, toggleIsFetching } from '../../redux/users-reducer';\nimport React from 'react';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport Preloader from '../common/Preloader/Preloader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UsersAPIContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.toggleIsFetching(true);\n      this.props.setCurrentPage(pageNumber);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`, {\n        withCredentials: tru\n      }).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`, {\n      withCredentials: true\n    }).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        setTotalUsersCount: this.props.setTotalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        onPageChanged: this.onPageChanged,\n        totalUsersCount: this.props.totalUsersCount,\n        users: this.props.users,\n        follow: this.props.follow,\n        unFollow: this.props.unFollow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n/*\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        follow: (userId) => {\n            dispatch(followActionCreator(userId));\n        },\n        unfollow: (userId) => {\n            dispatch(unFollowActionCreator(userId));\n        },\n        setUsers: (users) => {\n            dispatch(setUsersActionCreator(users));\n        },\n        setCurrentPage: (pageNumber) => {\n            dispatch(setCurrentPageActionCreator(pageNumber))\n        },\n        setTotalUsersCount: (totalCount) => {\n            dispatch(setTotalUsersCountActionCreator(totalCount))\n        },\n        toggleIsFetching: (isFetching) => {\n            dispatch(toggleIsFetchingActionCreator(isFetching))\n        }\n    }\n} \n*/\n\n\nconst UsersContainer = connect(mapStateToProps, {\n  follow,\n  unFollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching\n})(UsersAPIContainer);\nexport default UsersContainer;","map":{"version":3,"sources":["/Users/horodechna.julia/Documents/git/react/social/my-app/src/components/Users/UsersContainer.jsx"],"names":["connect","follow","setUsers","unFollow","setCurrentPage","setTotalUsersCount","toggleIsFetching","React","axios","Users","Preloader","UsersAPIContainer","Component","onPageChanged","pageNumber","props","get","pageSize","withCredentials","tru","then","response","data","items","componentDidMount","currentPage","totalCount","render","isFetching","totalUsersCount","users","mapStateToProps","state","usersPage","UsersContainer"],"mappings":"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","sourcesContent":["\nimport { connect } from 'react-redux'\nimport { follow, setUsers, unFollow, setCurrentPage, setTotalUsersCount, toggleIsFetching } from '../../redux/users-reducer';\nimport React from 'react'\nimport * as axios from 'axios';\nimport Users from './Users';\nimport Preloader from '../common/Preloader/Preloader';\n\n\nclass UsersAPIContainer extends React.Component {\n\n    componentDidMount() {\n        this.props.toggleIsFetching(true);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`, {\n            withCredentials:true\n        })\n            .then(response => {\n                this.props.toggleIsFetching(false);\n                this.props.setUsers(response.data.items);\n                this.props.setTotalUsersCount(response.data.totalCount);\n            })\n    }\n\n    onPageChanged = (pageNumber) => {\n        this.props.toggleIsFetching(true);\n        this.props.setCurrentPage(pageNumber);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`, {\n            withCredentials:tru\n        })\n            .then(response => {\n                this.props.toggleIsFetching(false);\n                this.props.setUsers(response.data.items);\n            })\n    }\n\n    render() {\n        return <div>\n            {this.props.isFetching ?\n                <Preloader />\n                : null}\n            <Users setTotalUsersCount={this.props.setTotalUsersCount}\n                pageSize={this.props.pageSize}\n                currentPage={this.props.currentPage}\n                onPageChanged={this.onPageChanged}\n                totalUsersCount={this.props.totalUsersCount}\n                users={this.props.users}\n                follow={this.props.follow}\n                unFollow={this.props.unFollow}\n\n            />\n        </div>\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\n/*\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        follow: (userId) => {\n            dispatch(followActionCreator(userId));\n        },\n        unfollow: (userId) => {\n            dispatch(unFollowActionCreator(userId));\n        },\n        setUsers: (users) => {\n            dispatch(setUsersActionCreator(users));\n        },\n        setCurrentPage: (pageNumber) => {\n            dispatch(setCurrentPageActionCreator(pageNumber))\n        },\n        setTotalUsersCount: (totalCount) => {\n            dispatch(setTotalUsersCountActionCreator(totalCount))\n        },\n        toggleIsFetching: (isFetching) => {\n            dispatch(toggleIsFetchingActionCreator(isFetching))\n        }\n    }\n} \n*/\nconst UsersContainer = connect(mapStateToProps,\n    {\n        follow, unFollow, setUsers, setCurrentPage,\n        setTotalUsersCount, toggleIsFetching\n    }\n)(UsersAPIContainer)\nexport default UsersContainer"]},"metadata":{},"sourceType":"module"}